1. VAR vs Let vs Const
    -> var is function-scoped while let and const are block-scoped. var variables can be reassigned while let and const variables can not. var variables are declared using the var keyword while let and const variables are declared using the let and const keywords respectively.

2. what is array.map() method ?
    -> array.map() method are use to travers the array and it take the Callback (Callback is a function which is passed as an argument to other function) function as a argument.
            and that Callback function take 3 arguments (1st value, 2nd index started from 0, 3rd array which we can use in function).
    eg. const hello = [4, 3, 2, 6];
        hello.map(function(val, idx, arr){
            console.log(val, idx, arr);
        });

    output: 4 0 [ 4, 3, 2, 6 ]
            3 1 [ 4, 3, 2, 6 ]
            2 2 [ 4, 3, 2, 6 ]
            6 3 [ 4, 3, 2, 6 ]
Note: array.map() return a new array with the same length as the original array (hello). Original array stays unmodified. and we can save new array into a variable(result).


const result = hello.map(function(val, idx, arr){
    console.log(val, idx, arr);
});

console.log("result", result);

/*
output: 

4 0 [ 4, 3, 2, 6 ]
3 1 [ 4, 3, 2, 6 ]
2 2 [ 4, 3, 2, 6 ]
6 3 [ 4, 3, 2, 6 ]

result [ undefined, undefined, undefined, undefined ]

*/
But the value are undefined for now why? 
    -> It's because we have to return some value from array.map() method which is the new values for our new array. If a function does not have a return value then that function returns undefined.
eg.
    const result = hello.map(function(val){
        return val * 2;
    });

    console.log(result);

    output: [ 8, 6, 4, 12 ]

3. what is reduce method ?
    -> array.reduce() method is like array.map() method but it return the single value and it take 2 arguments 1st is callback function 
    , 2nd is accumulater(starting value (0)).
    -> In callback function we have 2 arguments 1st is previous value also called (accumulater), 2nd is current value.
    eg. const hello = [7, 4, 9, 4, 5];

        const result = hello.reduce(function(prevVal, curVal){
            console.log(prevVal, curVal);
            return prevVal + curVal;
        }, 0);

        console.log('result', result);
        output: 0 7
                7 4
                11 9
                20 4
                24 5
                result 29

    If you want to create object from an array you need pass 2nd argument as empty object {}.
        -> eg.
                const result = hello.reduce(function(acc, curVal, curIdx){
                const mappedElem = {};
                mappedElem[curIdx] = curVal;
                return Object.assign(acc, mappedElem)
            }, {});

            console.log('result', result);

            // output: result { '0': 7, '1': 4, '2': 9, '3': 4, '4': 5 }

    Note: Always specify intial value (second argument) as otherwise array.reduce() method work slightly different.

4. Function expressions vs function declaration.
    -> 

    eg. 
    // function declaration: 
    function hello(){
        console.log("Prince");
    }

    // function expression  
    const hello2 = function(){
        console.log("Prince");
    }

    // calling the both functions
    hello();
    hello2();

    Note: Expression is an entity that evaluates to a value.
    eg. const h = 5;
        variable h evaluates to value 5.    

    difference between function declaration and function expression.
    -> if we move both the function calles to top of the code.
    eg.

    // calling the both functions
    hello();
    hello2();

    // function declaration: 
    function hello(){
        console.log("Prince");
    }

    // function expression  
    const hello2 = function(){
        console.log("Prince");
    }

    if we now run the program we get the Reference error.
    output: 
    Prince
    ReferenceError: Cannot access 'hello2' before initialization.

    why? 
    -> Hoisting is when the code (declaration) are evaluated by JS prior to code execution.
    In simple words JS complier move the all the declaration part of the code to top of the program.
    But Expression are evaluated by JS at the execution time, as they appear in the code.

